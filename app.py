import random
import nltk
from sklearn.svm import LinearSVC
from sklearn.feature_extraction.text import TfidfVectorizer
import speech_recognition as sr
import soundfile as sf
from gtts import gTTS
from pydub import AudioSegment
from config import BOT_CONFIG
from database import get_random_product, get_product_by_category
from io import BytesIO


X_text = []  
y = []  

print('—á–∏—Ç–∞—é bot_config')
for intent, intent_data in BOT_CONFIG['intents'].items():
    for example in intent_data['examples']:
        X_text.append(example)
        y.append(intent)

print('–ò—Å–ø–æ–ª—å–∑—É—é –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ')
vectorizer = TfidfVectorizer(analyzer='char', ngram_range=(3, 3))
X = vectorizer.fit_transform(X_text)
clf = LinearSVC()
clf.fit(X, y)
train_accuracy = clf.score(X, y)
print(f"–¢–æ—á–Ω–æ—Å—Ç—å (–º–µ—Ç–æ–¥ score): {train_accuracy:.2f}")

def clear_phrase(phrase):
    phrase = phrase.lower()

    alphabet = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è- '
    result = ''.join(symbol for symbol in phrase if symbol in alphabet)
    
    return result.strip()

def classify_intent(replica):
    replica = clear_phrase(replica)

    intent = clf.predict(vectorizer.transform([replica]))[0]
   
    for example in BOT_CONFIG['intents'][intent]['examples']:
        example = clear_phrase(example)
        distance = nltk.edit_distance(replica, example)
        if example and distance / len(example) <= 0.5:
            return intent

def get_answer_by_intent(intent, is_audio = False):
    if intent in BOT_CONFIG['intents']:
        if intent == 'tables' and not is_audio:
            product = get_random_product()
            if product:
                return {
                    'type': 'product',
                    'data': product
                }
        elif intent in ['thin', 'corner'] and not is_audio:  
            product = get_product_by_category(intent)
            if product:
                return {
                    'type': 'product',
                    'data': product  
                }
        responses = BOT_CONFIG['intents'][intent]['responses']
        if responses:
            return random.choice(responses)
print('–û—Ç–∫—Ä—ã–≤–∞—é –¥–∏–∞–ª–æ–≥–∏')
with open('dialogs.txt',encoding='utf-8') as f:
    content = f.read()

dialogues_str = content.split('\n\n')
dialogues = [dialogue_str.split('\n')[:2] for dialogue_str in dialogues_str]

dialogues_filtered = []
questions = set()

for dialogue in dialogues:
    if len(dialogue) != 2:
        continue
   
    question, answer = dialogue
    question = clear_phrase(question[2:])
    answer = answer[2:]
   
    if question != '' and question not in questions:
        questions.add(question)
        dialogues_filtered.append([question, answer])

dialogues_structured = {}  #  {'word': [['...word...', 'answer'], ...], ...}

for question, answer in dialogues_filtered:
    words = set(question.split(' '))
    for word in words:
        if word not in dialogues_structured:
            dialogues_structured[word] = []
        dialogues_structured[word].append([question, answer])

dialogues_structured_cut = {}
for word, pairs in dialogues_structured.items():
    pairs.sort(key=lambda pair: len(pair[0]))
    dialogues_structured_cut[word] = pairs[:1000]

def generate_answer(replica):
    replica = clear_phrase(replica)
    words = set(replica.split(' '))
    mini_dataset = []
    for word in words:
        if word in dialogues_structured_cut:
            mini_dataset += dialogues_structured_cut[word]
    mini_dataset = list(set(mini_dataset))

    answers = [] 

    for question, answer in mini_dataset:
        if abs(len(replica) - len(question)) / len(question) < 0.2:
            distance = nltk.edit_distance(replica, question)
            distance_weighted = distance / len(question)
            if distance_weighted < 0.2:
                answers.append([distance_weighted, question, answer])
   
    if answers:
        return min(answers, key=lambda three: three[0])[2]

def get_failure_phrase():
    failure_phrases = BOT_CONFIG['failure_phrases']
    return random.choice(failure_phrases)

stats = {'intent': 0, 'generate': 0, 'failure': 0}

def recognise_audio(file_path):
    r = sr.Recognizer()
    audio_file = file_path
    with sr.AudioFile(audio_file) as source:
        audio = r.record(source) # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –∏–∑ —Ñ–∞–π–ª–∞
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    try:
        text = r.recognize_google(audio, language="ru-RU")
        print("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", text)
        return text
    except sr.UnknownValueError:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
    except sr.RequestError as e:
        print("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏; {0}".format(e))

def generate_audio(message):
    tts = gTTS(text=message, lang='ru')
    tts.save("output_temp.mp3")

def generate_audio_response(message):
    intent = classify_intent(message)

    # Answer generation
   
    # –≤—ã–±–æ—Ä –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–ø–ª–∏–∫–∏
    if intent:
        answer = get_answer_by_intent(intent,1)
        if answer:
            stats['intent'] += 1
            print("audio anser intent")
            generate_audio(answer)
            return

    # –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    answer = generate_answer(message)
    if answer:
        stats['generate'] += 1
        print("audio answer generate")
        generate_audio(answer)
        return
   
    # –±–µ—Ä–µ–º –∑–∞–≥–ª—É—à–∫—É
    stats['failure'] += 1
    print("audio answer fail")
    generate_audio(get_failure_phrase())
    print(answer)
    return

def bot(replica):
    # NLU
    intent = classify_intent(replica)

    # Answer generation
   
    # –≤—ã–±–æ—Ä –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π —Ä–µ–ø–ª–∏–∫–∏
    if intent:
        answer = get_answer_by_intent(intent)
        if answer:
            stats['intent'] += 1
            return answer

    # –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    answer = generate_answer(replica)
    if answer:
        stats['generate'] += 1
        return answer
   
    # –±–µ—Ä–µ–º –∑–∞–≥–ª—É—à–∫—É
    stats['failure'] += 1
    return get_failure_phrase()


    

from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext,  ApplicationBuilder
import string
import requests
import os
import base64
from dotenv import load_dotenv
API_URL = "http://localhost:7860/sdapi/v1/txt2img"

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
api_key = os.getenv('API_KEY')  

async def generate_image(update: Update, context: CallbackContext):
    prompt = " ".join(context.args)
    if not prompt:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    payload = {
        "prompt": prompt,
        "steps": 30,
    }
    
    try:
        response = requests.post(API_URL, json=payload)
        data = response.json() 
        image_data = base64.b64decode(data["images"][0])  
        image = BytesIO(image_data)
        image.seek(0)
        await update.message.reply_photo(photo=image)
        print(f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ prompt:{prompt}')
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}')

async def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    await  update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏!\n–¢–∞–∫–∂–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã\n/choose - –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n/password - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å\n/generate - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')

async def choose(update: Update, context: CallbackContext):
    options = context.args  # –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not options:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /choose –ø–∏—Ü—Ü–∞ —Å—É—à–∏ –ø–∞—Å—Ç–∞")
        return
    choice = random.choice(options)
    await update.message.reply_text(f"üé≤ –ú–æ–π –≤—ã–±–æ—Ä: {choice}!")

async def password(update: Update, context: CallbackContext):
    try:
        length = int(context.args[0]) if context.args else 12  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 12 —Å–∏–º–≤–æ–ª–æ–≤
        if length < 4:
            await update.message.reply_text("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚â• 4")
            return
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä–æ–ª—å: –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã + —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        chars = string.ascii_letters + string.digits + "!@#$%^&*"
        generated_password = ''.join(random.choice(chars) for _ in range(length))
        await update.message.reply_text(f"üîë –í–∞—à –ø–∞—Ä–æ–ª—å: `{generated_password}`", parse_mode="Markdown")
    
    except (IndexError, ValueError):
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /password 10")

async def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text('–î–ª—è –æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ!\n–∫–æ–º–∞–Ω–¥–∞ /choose –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:\n/choose –∞—Ä–≥1 –∞—Ä–≥2 –∞—Ä–≥3\n–∫–æ–º–∞–Ω–¥–∞ /password –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (—Ü–∏—Ñ—Ä–∞ - –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è)\n/password 12\n–∫–æ–º–∞–Ω–¥–∞ /generate –∏–º–µ–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:\n/generate –ü—Ä–∏–º–µ—Ä–ü—Ä–æ–º–ø—Ç–∞')

async def text_handler(update: Update, context: CallbackContext) -> None:
    replica = update.message.text
    answer = bot(replica)
    if isinstance(answer, dict) and answer.get('type') == 'product':
        product = answer['data']
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
        response = requests.get(product['image_url'])
        photo = BytesIO(response.content)
        photo.name = 'product.jpg'
        
        caption = f"–ú–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å: {product['name']}\n\n{product['description']}\n\n–¶–µ–Ω–∞: {product['price']} —Ä—É–±."
        await update.message.reply_photo(photo=photo, caption=caption)
    else:
        await update.message.reply_text(answer)
   
    print(stats); print(replica); print(answer); print()

async def get_voice(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    new_file = await context.bot.get_file(update.message.voice.file_id)
    await new_file.download_to_drive("audio_temp.ogg")
    data, samplerate = sf.read('audio_temp.ogg')
    sf.write('audio_temp.wav', data, samplerate)
    message = recognise_audio('audio_temp.wav')
    if message:
        generate_audio_response(message)
        my_file = os.path.abspath("output_temp.mp3")
        sound = AudioSegment.from_file(my_file)
        sound.export("output_temp.ogg", format="ogg")
        await update.message.reply_audio("output_temp.ogg")
        print(stats); print(message); print("audio response"); print()
    os.remove("output_temp.ogg")
    os.remove('output_temp.mp3')  
    os.remove("audio_temp.ogg")
    os.remove('audio_temp.wav')

    


def main():
    """Start the bot."""
    application = ApplicationBuilder().token(api_key).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT  & ~ filters.COMMAND, text_handler))
    application.add_handler(MessageHandler(filters.VOICE, get_voice))
    application.add_handler(CommandHandler("password", password))
    application.add_handler(CommandHandler("choose", choose))
    application.add_handler(CommandHandler("generate", generate_image))
    
    # Start the Bot
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    application.run_polling()

main()